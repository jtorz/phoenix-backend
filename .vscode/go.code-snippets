{
	// Place your phoenix-db workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"leximport":{
		"scope": "go",
		"prefix": "leximport",
		"body": [
			"//lint:ignore ST1001 dot import allowed only in dao packages for lex.",
			". \"github.com/jtorz/phoenix-backend/app/shared/lex\""
		]
	},
	"queryRows": {
		"scope": "go",
		"prefix": "queryRows",
		"body": [
			"res := make([]$1, 0)",
			"query := NewSelect(T.$2).",
			"    Select(",
			"    $2.$3,",
			").",
			"    Where(",
			"    goqu.C($2.$4).Eq($5),",
			")",
			"",
			"rows, err := QueryContext(ctx, dao.Exe, query)",
			"if err != nil {",
			"    if err == sql.ErrNoRows {",
			"        return res, nil",
			"    }",
			"    return nil, WrapErr(ctx, err)",
			"}",
			"defer rows.Close()",
			"for rows.Next(){",
			"    rec := $1{}",
			"    err := rows.Scan(",
			"        &rec.$0,",
			"    )",
			"    if err != nil {",
			"        return nil, WrapErr(ctx, err)",
			"    }",
			"    res = append(res, rec)",
			"}",
			"return res, nil",
			""
		]
	},
	"queryRow": {
		"scope": "go",
		"prefix": "queryRow",
		"body": [
			"rec := &$1{}",
			"query := NewSelect(T.$2).",
			"    Select(",
			"    $2.$3,",
			").",
			"    Where(",
			"        goqu.C($2.$5).Eq($6),",
			"    )",
			"",
			"row, err := QueryRowContext(dao.Ctx, dao.Exe, query)",
			"if err != nil {",
			"    return nil, WrapErr(ctx, err)",
			"}",
			"err = row.Scan(",
			"    &rec.$0,",
			")",
			"if err != nil {",
			"    return nil, WrapErr(ctx, err)",
			"}",
			"return rec, nil",
			""
		]
	},
	"queryUpdate": {
		"scope": "go",
		"prefix": "queryUpdate",
		"body": [
			"now := time.Now()",
			"query := NewUpdate(T.$1).",
			"Set(goqu.Record{",
			"    $1.$2:$3.$4,",
			"    $1.UpdatedAt$5:now,",
			"}).",
			"Where(",
			"    goqu.C($1.ID$7).Eq($3.ID),",
			"    goqu.C($1.$5).Eq($3.UpdatedAt),",
			")",
			"res, err := DoUpdate(ctx,dao.Exe,query)",
			"if err != nil{",
			"    return WrapErr(ctx, err)",
			"}",
			"if err=CheckOneRowUpdated(ctx, res); err != nil{",
			"    return err",
			"}",
			"$3.UpdatedAt = now",
			"return nil"
		]
	},
	"queryInsert": {
		"scope": "go",
		"prefix": "queryInsert",
		"body": [
			"now := time.Now()",
			"ins := NewInsert(T.$1).Rows(goqu.Record{",
			"    $1.$2:$3.$4,",
			"    $1.UpdatedAt$5:now,",
			"})",
			"row, err := DoInsertReturning(ctx, dao.Exe, ins,$1.$6)",
			"if err != nil {",
			"    return WrapErr(ctx, err)",
			"}",
			"if err := row.Scan(&$3.ID); err != nil{",
			"    return err",
			"}",
			"$3.UpdatedAt = now",
			"return nil",
		]
	},
	"join": {
		"scope": "go",
		"prefix": "join",
		"body": "InnerJoin(goqu.T(T.$1), goqu.On(goqu.Ex{$1.$2: goqu.I($3)}))."
	},
}